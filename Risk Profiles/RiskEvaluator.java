import java.io.*;
import java.util.*;

public class RiskEvaluator {	
	private static double p01;
	private static double p02;
	private static double p08;
	private static double p13;
	private static double p23;
	private static double p25;
	private static double p30;
	private static double p31;
	private static double p32;
	private static double p56;
	private static double p67;
	private static double p73;
	private static double p80;
	private static double p98;
	private static double p910;
	private static double p1011;
	private static double p114;
	private static double r = 3.00;
	private static double w = 3.00;
	private static double s = 3.00;
	private static double risk;
	
	private static FileReader fileReader;
	private static BufferedReader bufferedReader;
	
    public static void main(String [] args) {  
    	BufferedWriter validCombsOutfile = null;
    	BufferedWriter invalidCombsOutfile = null;
    	String validCombinations = "ValidCombinations.txt"; 
    	String invalidCombinations = "inValidCombinations.txt";
    	String entry = null;
    	
    	try {      
        	FileWriter validfstream = new FileWriter(validCombinations, false);
        	validCombsOutfile = new BufferedWriter(validfstream);
        	validCombsOutfile.write("p01,p02,p08,p13,p23,p25,p30,p31,p32,p56,p67,p73,p80,p98,p910,p1011,p114,Risk");
        	validCombsOutfile.newLine(); 
        	for(p01=0.01; p01<=1; p01+=0.1){
    			for(p02=0.01; p02<=1; p02+=0.1){
    				for(p08=0.01; p08<=1; p08+=0.1){
    					for(p13=0.01; p13<=1; p13+=0.1){
    						for(p23=0.01; p23<=1; p23+=0.1){
    							for(p25=0.01; p25<=1; p25+=0.1){
    								for(p30=0.01; p30<=1; p30+=0.1){
    									for(p31=0.01; p31<=1; p31+=0.1){
    										for(p32=0.01; p32<=1; p32+=0.1){
    											for(p56=0.01; p56<=1; p56+=0.1){
    												for(p67=0.01; p67<=1; p67+=0.1){
    													for(p73=0.01; p73<=1; p73+=0.1){
    														for(p80=0.01; p80<=1; p80+=0.1){
    															for(p98=0.01; p98<=1; p98+=0.1){
    																for(p910=0.01; p910<=1; p910+=0.1){
    																	for(p1011=0.01; p1011<=1; p1011+=0.1){
    																		for(p114=0.01; p114<=1; p114+=0.1){
    																			System.out.println((new Double(p01)).toString() + "," + (new Double(p02)).toString() + "," + (new Double(p08)).toString() + "," + (new Double(p13)).toString() + "," + (new Double(p23)).toString() + "," + (new Double(p25)).toString() + "," + (new Double(p30)).toString() + "," + (new Double(p31)).toString() + "," + (new Double(p32)).toString() + "," + (new Double(p56)).toString() + "," + (new Double(p67)).toString() + "," + (new Double(p73)).toString() + "," + (new Double(p80)).toString() + "," + (new Double(p98)).toString() + "," + (new Double(p910)).toString() + "," + (new Double(p1011)).toString() + "," + (new Double(p114)).toString()+ "," + (new Double(evaluate())).toString());
    																			entry = (new Double(p01)).toString() + "," + (new Double(p02)).toString() + "," + (new Double(p08)).toString() + "," + (new Double(p13)).toString() + "," + (new Double(p23)).toString() + "," + (new Double(p25)).toString() + "," + (new Double(p30)).toString() + "," + (new Double(p31)).toString() + "," + (new Double(p32)).toString() + "," + (new Double(p56)).toString() + "," + (new Double(p67)).toString() + "," + (new Double(p73)).toString() + "," + (new Double(p80)).toString() + "," + (new Double(p98)).toString() + "," + (new Double(p910)).toString() + "," + (new Double(p1011)).toString() + "," + (new Double(p114)).toString() + "," + (new Double(evaluate())).toString();
    																			validCombsOutfile.write(entry);
        																		validCombsOutfile.newLine(); 
    																		}
    																	}
    																}
    															}
    														}
    													}
    												}
    											}
    										}
    									}
    								}
    							}
    						}
    					}
    				}
    			}    			
    		}
    		System.out.println("Evaluation Completed.....");        	       	
        } catch (Exception e) {
        	System.out.println("Writing to results file has failed..");	
        	System.out.println(e);        	
        } finally {        	
    		if(validCombsOutfile != null) {
    			try{
        			validCombsOutfile.close();
        		} catch(IOException e) {
        			System.out.println("Unable to save file '" + validCombinations + "'");
        		}
    		}    		
		}     	              		           
    }
    
    public static double evaluate() {
    	return(((r+w)*(p02/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-p32*p13*(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/((1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))+r*((p13*(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))+(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))*(p02/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-p32*p13*(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/((1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))))+r*((p08*(p80-1)*(p114*(p910-(1-p98))-p114*p1011*p910))/(((p1011-1)*p910+1)*(1-(-(p80-1)*p98)/((p1011-1)*p910+1)))-(p32-(1-p30-p31))*((p13*(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))+(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))*(p02/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-p32*p13*(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/((1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))))))/(1-(1-p01-p02-p08)-(p08*p80)/(1-(-(p80-1)*p98)/((p1011-1)*p910+1))-(-p02*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(p13-1-p30*p13-(-p32*p13*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))+(r*(p02/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-p32*p13*(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/((1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))*p25)/((1-(1-p01-p02-p08)-(p08*p80)/(1-(-(p80-1)*p98)/((p1011-1)*p910+1))-(-p02*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(p13-1-p30*p13-(-p32*p13*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))*((p67-1)*p56+1))+(r*p56*(p02/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-p32*p13*(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/((1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))*p25)/((1-(1-p01-p02-p08)-(p08*p80)/(1-(-(p80-1)*p98)/((p1011-1)*p910+1))-(-p02*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(p13-1-p30*p13-(-p32*p13*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))*((p67-1)*p56+1))+(r*p08)/((1-(1-p01-p02-p08)-(p08*p80)/(1-(-(p80-1)*p98)/((p1011-1)*p910+1))-(-p02*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(p13-1-p30*p13-(-p32*p13*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))*(1-(-(p80-1)*p98)/((p1011-1)*p910+1)))-((r+w)*(p80-1)*p08)/((1-(-(p80-1)*p98)/((p1011-1)*p910+1))*((p1011-1)*p910+1)*(1-(1-p01-p02-p08)-(p08*p80)/(1-(-(p80-1)*p98)/((p1011-1)*p910+1))-(-p02*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(p13-1-p30*p13-(-p32*p13*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))))-(r*p910*(p80-1)*p08)/((1-(-(p80-1)*p98)/((p1011-1)*p910+1))*((p1011-1)*p910+1)*(1-(1-p01-p02-p08)-(p08*p80)/(1-(-(p80-1)*p98)/((p1011-1)*p910+1))-(-p02*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(p13-1-p30*p13-(-p32*p13*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))))+((r+w+s)*(((p910-(1-p98))*(p80-1)*p08)/((1-(-(p80-1)*p98)/((p1011-1)*p910+1))*((p1011-1)*p910+1))-(p1011*p910*(p80-1)*p08)/((1-(-(p80-1)*p98)/((p1011-1)*p910+1))*((p1011-1)*p910+1))))/(1-(1-p01-p02-p08)-(p08*p80)/(1-(-(p80-1)*p98)/((p1011-1)*p910+1))-(-p02*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))-(-(p01+(p02*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))*(p13-1-p30*p13-(-p32*p13*(p25-(1-p23)-p30*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1))))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))/(1-p31*p13-(p32*p13*p31*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))/(1-(-p25*(p56-1))/((p67-1)*p56+1)-p32*(p23+(p25*p73*p67*p56)/((p67-1)*p56+1)))))
);
    }                        
        
}